URL parsing
URL validation regex 
https://mathiasbynens.be/demo/url-regex
I personally use regex by @diegoperini (502 chars) with some modifications
//links might be "https:\/\/foundry.att.com\/wp-json\/realmedialibrary\/v1\/reset\/slugs" replace \/ -> /
^(?:(?:(?:https?|ftp|file|gopher|sftp|dict|ldap|tftp|shttp):)?\/\/)(?:\S+(?::\S*)?@)?(?:(?!(?:10|127)(?:\.\d{1,3}){3})(?!(?:169\.254|192\.168)(?:\.\d{1,3}){2})(?!172\.(?:1[6-9]|2\d|3[0-1])(?:\.\d{1,3}){2})(?:[1-9]\d?|1\d\d|2[01]\d|22[0-3])(?:\.(?:1?\d{1,2}|2[0-4]\d|25[0-5])){2}(?:\.(?:[1-9]\d?|1\d\d|2[0-4]\d|25[0-4]))|(?:(?:[a-z0-9\u00a1-\uffff][a-z0-9\u00a1-\uffff_-]{0,62})?[a-z0-9\u00a1-\uffff]\.)+(?:[a-z\u00a1-\uffff]{2,}\.?))(?::\d{2,5})?(?:[/?#]\S*)?$|(?:\b[a-z\d.-]+://[^"<>\s]+|\b(?:(?:(?:[^\s!\\@#$%^&*()_=+[\]{}\|:'",.<>/?]+)\.)+(?:ac|ad|aero|ae|af|ag|ai|al|am|an|ao|aq|arpa|ar|asia|as|at|au|aw|ax|az|ba|bb|bd|be|bf|bg|bh|biz|bi|bj|bm|bn|bo|br|bs|bt|bv|bw|by|bz|cat|ca|cc|cd|cf|cg|ch|ci|ck|cl|cm|cn|coop|com|com.mx|co|cr|cu|cv|cx|cy|cz|de|dj|dk|dm|do|dz|ec|edu|ee|eg|er|es|et|eu|fi|fj|fk|fm|fo|fr|ga|gb|gd|ge|gf|gg|gh|gi|gl|gm|gn|gov|gp|gq|gr|gs|gt|gu|gw|gy|hk|hm|hn|hr|ht|hu|id|ie|il|im|info|int|in|io|iq|ir|is|it|je|jm|jobs|jo|jp|ke|kg|kh|ki|km|kn|kp|kr|kw|ky|kz|la|lb|lc|li|lk|lr|ls|lt|lu|lv|ly|ma|mc|md|me|mg|mh|mil|mk|ml|mm|mn|mobi|mo|mp|mq|mr|ms|mt|museum|mu|mv|mw|mx|my|mz|name|na|nc|net|ne|nf|ng|ni|nl|no|np|nr|nu|nz|om|org|pa|pe|pf|pg|ph|pk|pl|pm|pn|pro|pr|ps|pt|pw|py|qa|re|ro|rs|ru|rw|sa|sb|sc|sd|se|sg|sh|si|sj|sk|sl|sm|sn|so|sr|st|su|sv|sy|sz|tc|td|tel|tf|tg|th|tj|tk|tl|tm|tn|to|tp|travel|tr|tt|tv|tw|tz|ua|ug|uk|um|us|uy|uz|va|vc|ve|vg|vi|vn|vu|wf|ws|xn--0zwm56d|xn--11b5bs3a9aj6g|xn--80akhbyknj4f|xn--9t4b11yi5a|xn--deba0ad|xn--g6w251d|xn--hgbk6aj7f53bba|xn--hlcj6aya9esc7a|xn--jxalpdlp|xn--kgbechtv|xn--zckzah|ye|yt|yu|za|zm|zw)|(?:(?:[0-9]|[1-9]\d|1\d{2}|2[0-4]\d|25[0-5])\.){3}(?:[0-9]|[1-9]\d|1\d{2}|2[0-4]\d|25[0-5]))(?:[?#/][^;'\\"#?<>\s]*)?(?:\?[^#<>\s]*)?(?:#[^<>\s]*)?(?!\w))
You can add more top domains to this regex

 
Hidden links parsing (https://github.com/GerbenJavado/LinkFinder)
(?:"|')(((?:[a-zA-Z]{1,10}://|//)[^"'/]{1,}\.[a-zA-Z]{2,}[^"']{0,})|((?:/|\.\./|\./)[^"'><,;| *()(%%$^/\\\[\]][^"'><,;|()]{1,})|([a-zA-Z0-9_\-/]{1,}/|[a-zA-Z0-9_\-/][a-zA-Z0-9_\-/]{1,}\.(?:[a-zA-Z]{1,4}|action)(?:[\?|/|;][^"|']{0,}|))|([a-zA-Z0-9_\-]{1,}\.(?:action|ad|adprototype|apk|app|application|asax|ascx|ashx|asmx|asp|aspq|aspx|axd|bat|bin|browser|cd|cfm|cgi|cmd|com|command|config|cpl|cs|csh|cshtm|cshtml|csproj|dd|dll.config|do|doc|docm|dotm|exclude|exe|exe.config|gadget|go|hta|html|inf|inf1|ini|ins|inx|ipa|isu|jar|java|job|js|jse|jsl|json|jsp|ksh|ldb|ldd|lddprototype|ldf|licx|lnk|master|md|mdb|mdf|mkd|msc|msh|msh1|msh1xml|msh2|msh2xml|mshxml|msi|msp|mst|osx|out|paf|php|phtml|pif|pl|potm|ppam|ppsm|ppt|pptm|prg|ps1|ps1xml|ps2|ps2xml|psc1|psc2|py|rb|refresh|reg|rem|resources|resx|rgs|rules|run|scf|scr|sct|sd|sdm|sdmDocument|sh|shb|shs|sitemap|skin|sldm|soap|svc|toml|txt|u3p|vb|vbe|vbhtm|vbhtml|vbproj|vbs|vbscript|vjsproj|wadl|webinfo|workflow|ws|wsc|wsdl|wsf|wsh|xamlx|xlam|xls|xlsm|xltm|xml|xoml|xrd|yaml|yml)(?:\?[^"|']{0,}|)))(?:"|')


URL parts
: / ? # [ ] @ зарезервированы в rfc 3986
! $ & ' ( ) * + , ; = разрешены в качестве делителей, но без конкретного  presumably to allow scheme- or application-specific features to be implemented within any of the top-level sections места
- . _ ~  незарезрвированные (без кодировки могут использоваться)
^ { | }  все браузеры разрешают использовать (без кодировки могут использоваться)
<> - windows

hostname 
(?<=://).*?(?=/)
от // до /
вот такое может быть https://stackoverflow.com/questions/25703360/regular-expression-extract-subdomain-domain
(?:https?:\/\/)?(?:[^@\/\n]+@)?(?:www\.)?([^:\/?\n]+)
или короче
[^:\/?\n]+


query 
согласно rfc от ? до конца строки или до #
(?<=&|\?|;).*?(?=#|$) - от &|?|; и до конца строки или #
//trim здесь не нужен, т.к. от &|\?|;, не включая

path
начинается с / (не //) и The path is terminated by the first question mark ("?") or number sign ("#") character, or by the end of the URI.
(?<!/)/(?!/).*?([^?;&#]+) //trim нужен ("/") 

(?<!/)  # assert that the previous character is not a slash
/       # match a literal / character
(?!/)   # assert that the next character is not a slash
([^?;&#]+) # take rest before ?|;|&|#


JSON объект взять (?<=\{)\s*[^{]*?(?=[\},])


IPv4 address \b\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}\b

emails [\.\-_A-Za-z0-9]+?@[\.\-A-Za-z0-9-]+?[-\.A-Za-z0-9]{2,}


